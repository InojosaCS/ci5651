Intenté lo más que pude, pero lo más cercano que conseguí fue con complejidad O(n^2).

Básicamente se tiene Decomp(n) = Sum_{k=1..n} d(k)*d(n+1-k), dónde d(k) es el número de divisores positivos de k; d(i) se puede obtener O(1) de tiempo, y por lo tanto la suma en tiempo lineal, (esto precalculando el número de divisores con la criba de eratóstenes en O(N log N) en tiempo y O(N) en espacio). Esto se haría para cada n <= N y al final comparando todos los valores para obtener el máximo, y la complejidad vendría por Sum_{n=1..N} n = N * (N+1) / 2 = O(N^2).

El precálculo con la criba de eratóstenes, consistiría en hallar todos los primos en O(N log log N), luego para cada número hallar sus factores primos O(log N), para finalmente calcular el número de sus divisores con la cantidad de ocurrencias de cada factor primo. Por ejemplo: 2^2 * 3^1 * 5^1 tendría (2+1) * (1+1) * (1+1) = 12 divisores (Se multiplican los exponentes aumentados en uno). La complejidad de esto sería O(N log N) por O(log N) que hacemos N veces.
